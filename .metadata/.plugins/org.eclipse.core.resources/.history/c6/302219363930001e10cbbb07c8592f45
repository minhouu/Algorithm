import java.util.HashMap;

public class Main {
	public static void main(String[] args) {
		// 점화식 (f = n을 만드는 최소 횟수)
		// f(n) min {
		// 0 (n == 1)
		// f(n-1) + 1
		// f(n/2) + 1 (N == 2n)
		// f(n/3) + 1 (N = 3n)}

		// f(n-1)보다, f(n/2)보다, f(n/3)보다 1번만 더 연산하면 f(n)이 된다는 의미

		HashMap<Integer, Integer> memo = new HashMap<>();

	}

	public static int toOne(int n, HashMap<Integer, Integer> memo) {
		if (n == 1)
			return 0;
		if (memo.containsKey(n))
			return memo.get(n);
		
		int result = toOne(n-1, memo) + 1;
		if (n%3 == 0) 
			result = Math.min((toOne(n/3, memo) + 1), result);
		if (n%2 == 0)
			result = Math.min((toOne(n/2, memo) + 1), result);
		memo.put(n, result);
		
		return result;
	}
}
